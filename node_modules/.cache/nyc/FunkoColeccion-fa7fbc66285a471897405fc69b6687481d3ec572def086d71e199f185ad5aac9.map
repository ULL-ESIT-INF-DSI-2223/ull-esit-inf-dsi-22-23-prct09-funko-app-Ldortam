{"version":3,"file":"/home/usuario/Practicas/PR9_/src/ejercicio1/FunkoColeccion.ts","sources":["/home/usuario/Practicas/PR9_/src/ejercicio1/FunkoColeccion.ts"],"names":[],"mappings":"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","sourcesContent":["import { Funko, Genero, Tipo } from './Funko.js';\nimport { readFileSync, readdirSync, existsSync, writeFileSync, mkdirSync, rmSync } from 'fs';\nimport chalk from \"chalk\";\n/**\n * Enumerado con las características de un Funko\n * @param ID Identificador único del Funko\n * @param nombre Nombre del Funko\n * @param descripcion Descripcion del Funko\n * @param tipo Tipo, Pop!, Pop! Rides, Vynil Soda o Vynil Gold, entre otros\n * @param genero Genero, Animación, Películas y TV, Videojuegos, Deportes, Música o Ánime, entre otras\n * @param franquicia Franquicia, The Big Bang Theory, Game of Thrones, Sonic The Hedgehog o Marvel: Guardians of the Galaxy, entre otras.\n * @param numero Número identificativo del Funko dentro de la franquicia correspondiente\n * @param exclusivo Verdadero en el caso de que el Funko sea exclusivo o falso en caso contrario\n * @param caracteristicasEspeciales Característica especiales del Funko como, por ejemplo, si brilla en la oscuridad o si su cabeza balancea\n * @param valorMercado Precio del Funko\n */\nexport enum AtributosFunko {\n  Nombre = 'Nombre',\n  Descripcion = 'Descripción',\n  Tipo = 'Tipo',\n  Genero = 'Género',\n  Franquicia = 'Franquicia',\n  Numero = 'Número',\n  Exclusivo = 'Exclusivo',\n  CaracteristicasEspeciales = 'Características especiales',\n  ValorMercado = 'Valor del Mercado'\n}\n\n/**\n * Clase FunkoColeccion\n */\nexport class FunkoColeccion {\n  private usuario_: string\n  private Funkos: Funko[]\n    /**\n     * Constructor de la clase\n     * @param Funkos Array de Funkos\n     */\n    constructor(usuario: string, coleccion: Funko[]) {\n      this.usuario_ =  usuario\n      this.Funkos = coleccion\n    }\n\n    /** \n     * Getter del atributo usuario \n     * @returns el usuario\n     */\n    getUsuario() {\n      return this.usuario_\n    }\n\n    /**\n     * Método para añadir elementos al array\n     * @param funko Elemento a añadir\n     */\n    Add(funko: Funko) {\n        this.Funkos.forEach(funkos => {\n          if(funkos.getID() === funko.getID()) {\n            throw new Error(chalk.red('ERROR: Funko existente en lista'))\n          }\n        });\n        this.Funkos.push(funko)\n        console.log(chalk.green('Funko Añadido'))\n    }\n\n    /**\n     * Método para modificar elementos del array\n     * @param funko Elemento a modificar\n     */\n    Modify(funko: Funko){\n      let flag: boolean = false;\n      for (let index = 0; index < this.Funkos.length; index++) {\n        if (funko.getID() === this.Funkos[index].getID()) {\n          this.Funkos[index] = funko\n        } else {\n          throw new Error(chalk.red('ERROR: Funko inexistente en lista'))\n        }\n      }\n      console.log(chalk.green('Funko Añadido'))\n    }\n\n    /**\n     * Método para eliminar elementos del array\n     * @param ID Identificador del elemento\n     */\n    Delete(ID: number){\n      let flag: boolean = false;\n      this.Funkos.forEach((funko, index) => {\n        if (funko.getID() === ID) {\n          this.Funkos.slice(index, 1);\n          flag = true;\n        }\n      })\n      if(flag) console.log(chalk.green('Funko Borrado'))\n      else {\n        throw new Error(chalk.red('ERROR: Funko inexistente en lista'))\n      }\n    }\n\n    /**\n     * Método que muestra lista de elementos\n     */\n    List() {\n      this.Funkos.forEach(funko => { \n        if (funko.getValorMercado() <= 15) {\n          console.log(chalk.red(`Funko: ${funko.getID()} ${funko.getNombre()} de ${funko.getFranquicia()} \n                                ${funko.getTipo()} del género ${funko.getGenero()} con las siguientes habilidades \n                                ${funko.getCaracteresEspeciales()}. Descripción: ${funko.getDescripcion()}. \n                                Valor de mercado: ${funko.getValorMercado()}. Exclusivo: ${funko.getExclusivo()}`))\n        } else if (funko.getValorMercado() <= 30) {\n            console.log(chalk.blue(`Funko: ${funko.getID()} ${funko.getNombre()} de ${funko.getFranquicia()} \n                                  ${funko.getTipo()} del género ${funko.getGenero()} con las siguientes habilidades \n                                  ${funko.getCaracteresEspeciales()}. Descripción: ${funko.getDescripcion()}. \n                                  Valor de mercado: ${funko.getValorMercado()}. Exclusivo: ${funko.getExclusivo()}`))\n        } else if (funko.getValorMercado() <= 60) {\n            console.log(chalk.yellow(`Funko: ${funko.getID()} ${funko.getNombre()} de ${funko.getFranquicia()} \n                                      ${funko.getTipo()} del género ${funko.getGenero()} con las siguientes habilidades \n                                      ${funko.getCaracteresEspeciales()}. Descripción: ${funko.getDescripcion()}. \n                                      Valor de mercado: ${funko.getValorMercado()}. Exclusivo: ${funko.getExclusivo()}`))\n        } else {\n            console.log(chalk.green(`Funko: ${funko.getID()} ${funko.getNombre()} de ${funko.getFranquicia()} \n                                    ${funko.getTipo()} del género ${funko.getGenero()} con las siguientes habilidades \n                                    ${funko.getCaracteresEspeciales()}. Descripción: ${funko.getDescripcion()}. \n                                    Valor de mercado: ${funko.getValorMercado()}. Exclusivo: ${funko.getExclusivo()}`))\n        }\n      })\n    }\n\n    /**\n     * Método que muestra un único elemento\n     * @param ID \n     */\n    Show(ID: number) {\n      let flag: boolean = false;\n      this.Funkos.forEach((funko, index) => {\n        if (funko.getID() === ID) {\n          if (funko.getValorMercado() <= 15) {\n            console.log(chalk.red(`Funko: ${funko.getID()} ${funko.getNombre()} de ${funko.getFranquicia()} \n                                  ${funko.getTipo()} del género ${funko.getGenero()} con las siguientes habilidades \n                                  ${funko.getCaracteresEspeciales()}. Descripción: ${funko.getDescripcion()}. \n                                  Valor de mercado: ${funko.getValorMercado()}. Exclusivo: ${funko.getExclusivo()}`))\n          } else if (funko.getValorMercado() <= 30) {\n              console.log(chalk.blue(`Funko: ${funko.getID()} ${funko.getNombre()} de ${funko.getFranquicia()} \n                                    ${funko.getTipo()} del género ${funko.getGenero()} con las siguientes habilidades \n                                    ${funko.getCaracteresEspeciales()}. Descripción: ${funko.getDescripcion()}. \n                                    Valor de mercado: ${funko.getValorMercado()}. Exclusivo: ${funko.getExclusivo()}`))\n          } else if (funko.getValorMercado() <= 60) {\n              console.log(chalk.yellow(`Funko: ${funko.getID()} ${funko.getNombre()} de ${funko.getFranquicia()} \n                                        ${funko.getTipo()} del género ${funko.getGenero()} con las siguientes habilidades \n                                        ${funko.getCaracteresEspeciales()}. Descripción: ${funko.getDescripcion()}. \n                                        Valor de mercado: ${funko.getValorMercado()}. Exclusivo: ${funko.getExclusivo()}`))\n          } else {\n              console.log(chalk.green(`Funko: ${funko.getID()} ${funko.getNombre()} de ${funko.getFranquicia()} \n                                      ${funko.getTipo()} del género ${funko.getGenero()} con las siguientes habilidades \n                                      ${funko.getCaracteresEspeciales()}. Descripción: ${funko.getDescripcion()}. \n                                      Valor de mercado: ${funko.getValorMercado()}. Exclusivo: ${funko.getExclusivo()}`))\n          }\n          flag = true\n        }\n      }) \n      if(!flag) {\n        throw new Error(chalk.red('ERROR: Funko inexistente en lista'))\n      }\n    }\n  /**\n   * Método privado encargado de cargar un Funko a un fichero JSON\n   */\n  private storeFunko(ID: number, nombre: string, descripcion: string, tipo: Tipo, genero: Genero, franquicia: string, numero: number, exclusivo: boolean, caracteristicasEspeciales: string, valorMercado: number) {\n    let funkoToSave = {ID: ID, nombre: nombre, descripcion: descripcion, tipo: tipo, genero: genero, franquicia: franquicia, numero: numero, exclusivo: exclusivo, caractericticasEspeciales: caracteristicasEspeciales, valorMercado: valorMercado};\n    if (!existsSync('./data/' + this.usuario_)) {\n      mkdirSync('./data/' + this.usuario_);\n    }\n    writeFileSync('./data/' + this.usuario_ + '/' + ID + '.json', JSON.stringify(funkoToSave, null, 2),'utf8');\n  }\n}"]}